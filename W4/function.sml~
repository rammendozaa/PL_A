(*
Introduction
*)

fun double x = 2 * x
fun incr x = x + 1
val a_tuple = (double, incr, double (incr 7))
val eighteen = (#1 a_tuple) 9

(*
Functions as Arguments
*)

fun increment_n_times_lame(n, x) =
    if n = 0
    then
	x
    else
	1 + increment_n_times_lame(n - 1, x)

fun double_n_times_lame(n, x) =
    if n = 0
    then
	x
    else
	2 * double_n_times_lame(n - 1, x)

fun nth_tail_lame(n, xs) =
    if n = 0
    then
	xs
    else
	tl (nth_tail_lame(n - 1, xs))
(*
All the above code can be simplified since the behaviour is similar
*)

fun n_times(f, n, x) =
    if n = 0
	       
    then
	x
    else
	f(n_times(f, n - 1, x))

fun double x = 2 * x
fun increment x = x + 1
fun triple x = 3 * x

val x1 = n_times(double, 10, 2)
val x2 = n_times(triple, 4, 7)
val x3 = n_times(increment, 7, 3)
val x4 = n_times(tl, 2, [1,2,3,4])

fun addition(n, x) = n_times(increment, n, x)
fun double_n_times(n, x) = n_times(double, n, x)
fun nth_tail(n, x) = n_times(tl, n, x)
